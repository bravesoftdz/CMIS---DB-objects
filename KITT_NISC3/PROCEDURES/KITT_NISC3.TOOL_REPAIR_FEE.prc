DROP PROCEDURE TOOL_REPAIR_FEE;

CREATE OR REPLACE PROCEDURE TOOL_REPAIR_FEE
( UserId IN NUMBER
) AS
  IsPMO CHAR(1);
  STATUS VARCHAR2(100);
BEGIN
  DBMS_OUTPUT.ENABLE;
  IsPMO := PK_SECURITY.HAS_ROLE(UserId, 'PMO');
  IF (UPPER(IsPMO) = 'N') THEN
     STATUS := 'FAIL:  User#' || UserId || ' is not a PMO and tried to run TOOL_REPAIR_FEE.';
     DBMS_OUTPUT.PUT_LINE( STATUS );
     INSERT INTO KITT_LOG ( N_LOG_ID, N_CONTRACT_ID, F_LOG_CATEGORY, C_MESSAGE, D_REC_VERSION )
     SELECT SEQ_KITT_LOG.NEXTVAL, N_CONTRACT_ID, 'WARN', Status, SYSDATE
       FROM CONTRACT;
     RETURN;
  END IF; -- User is not PMO

  FOR FeeToNonFee IN
  ( SELECT D.N_DELPHI_OBLIGATION_ID
         , ROUND(N_FEE_AMOUNT - (((QUANTITY_ORDERED - QUANTITY_CANCELLED) / 1.115) * 0.115), 2) AS DELTA
      FROM DELPHI_OBLIGATION D
         , FEE
     WHERE D.N_DELPHI_OBLIGATION_ID = FEE.N_DELPHI_OBLIGATION_ID
       AND D.N_MOD_NUMBER = 4
       AND D.C_EXEMPT = 'N'
       AND N_FEE_AMOUNT - ROUND((((QUANTITY_ORDERED - QUANTITY_CANCELLED) / 1.115) * 0.115), 2) > 0.00)
  LOOP
    TOOL_XFER_FEE_TO_NON_FEE( FeeToNonFee.N_DELPHI_OBLIGATION_ID, FeeToNonFee.DELTA, UserId );
  END LOOP;

  FOR NonFeeToFee IN
  ( SELECT D.N_DELPHI_OBLIGATION_ID
         , ROUND(N_FEE_AMOUNT - (((QUANTITY_ORDERED - QUANTITY_CANCELLED) / 1.115) * 0.115), 2) AS DELTA
      FROM DELPHI_OBLIGATION D
         , FEE
     WHERE D.N_DELPHI_OBLIGATION_ID = FEE.N_DELPHI_OBLIGATION_ID
       AND D.N_MOD_NUMBER = 4
       AND D.C_EXEMPT = 'N'
       AND N_FEE_AMOUNT - ROUND((((QUANTITY_ORDERED - QUANTITY_CANCELLED) / 1.115) * 0.115), 2) < 0.00)
  LOOP
    TOOL_XFER_NON_FEE_TO_FEE( NonFeeToFee.N_DELPHI_OBLIGATION_ID, -NonFeeToFee.DELTA, UserId );
  END LOOP;

END TOOL_REPAIR_FEE;
/
